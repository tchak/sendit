// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @default(now()) @updatedAt @map("updated_at")
  email      String           @unique
  transports EmailTransport[]
  templates  EmailTemplate[]

  @@map("users")
}

model EmailTransport {
  id        String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @default(now()) @updatedAt @map("updated_at")
  name      String
  email     String
  host      String
  port      Int
  username  String
  password  String /// @encrypted
  userId    String          @map("user_id") @db.Uuid
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  templates EmailTemplate[]

  @@unique([id, userId])
  @@index(userId)
  @@map("email_transports")
}

model EmailTemplate {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @default(now()) @updatedAt @map("updated_at")
  subject      String
  body         Json            @default("[]")
  emailColumns String[]        @map("email_columns")
  data         Json            @default("{}")
  userId       String          @map("user_id") @db.Uuid
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  transportId  String?         @map("transport_id") @db.Uuid
  transport    EmailTransport? @relation(fields: [transportId], references: [id], onDelete: SetNull)
  messages     EmailMessage[]

  @@unique([id, userId])
  @@index(userId)
  @@index(transportId)
  @@map("email_templates")
}

enum EmailMessageState {
  Pending
  Sent
  Error
}

model EmailMessage {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at")
  sentAt           DateTime?         @map("sent_at")
  from             String
  to               String[]
  subject          String
  html             String
  text             String
  lastErrorMessage String?
  state            EmailMessageState @default(Pending)
  templateId       String            @map("template_id") @db.Uuid
  template         EmailTemplate     @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index(templateId)
  @@map("email_messages")
}
